(()=>{"use strict";function e(e){const n=e.target.result;n.objectStoreNames.contains("records")&&n.deleteObjectStore("records");const t=n.createObjectStore("records",{keyPath:"id",autoIncrement:!0});t.createIndex("key",["domainName","timeInterval"],{unique:!0}),t.createIndex("domainName","domainName",{unique:!1}),t.createIndex("timeInterval","timeInterval",{unique:!1}),t.createIndex("bytes","bytes",{unique:!1})}let n,t="";function o(e){if(0!=e.indexOf("chrome://")&&0!=e.length)return new URL(e).origin}function r(e){if(e!=t&&null!=e)return t=e,console.log("call api with :"+e),{}}function c(e){n=e,chrome.webRequest.onCompleted.addListener((function(e){if(!e.responseHeaders)return;const t=e.responseHeaders.find((e=>"content-length"==e.name.toLowerCase()));if(!t)return;const o=parseInt(t.value),r=function(){const e=new Date;return e.setMinutes(0,0,0),e.getTime()/1e3}();e.initiator.startsWith("chrome-extension://")||async function(e,t,o){const r=n.transaction(["records"],"readwrite").objectStore("records");r.index("key").get([o,t]).onsuccess=function(n){const c=n.target.result;c?function(e,n,t){n.bytes+=t;const o=e.put(n);o.onsuccess=function(e){console.log("record updated")},o.onerror=function(e){console.error("error updating record")}}(r,c,e):function(e,n,t,o){const r={domainName:n,timeInterval:t,bytes:o};e.add(r).onsuccess=function(e){console.log("record added")}}(r,o,t,e)}}(o,r,e.initiator||e.url)}),{urls:["<all_urls>"]},["responseHeaders"])}(async()=>{chrome.runtime.onInstalled.addListener((function(){console.log("Extension has been installed")})),chrome.tabs.onActivated.addListener((function(e){chrome.tabs.get(e.tabId,(function(e){r(o(e.url))}))})),chrome.tabs.onUpdated.addListener((function(e,n,t){r(o(t.url))}));const n=await new Promise(((n,t)=>{let o;const r=indexedDB.open("records",10);r.onerror=function(e){console.error("error opening db"),t()},r.onupgradeneeded=e,r.onsuccess=function(e){o=e.target.result,n(o)}}));c(n),async function(e){chrome.storage.local.remove("lastSynchronizationDate"),chrome.storage.local.get("lastSynchronizationDate",(function(e){if(e.lastSynchronizationDate){const n=new Date(e.lastSynchronizationDate);console.log("lastSynchronizationDate from "+n.getDate()+"/"+n.getMonth()+"/"+n.getFullYear())}else console.log("There are no synchronization registred in the logs")})),await function(){const e=new Date;e.setHours(0,0,0,0);const n=e.getTime();return new Promise(((e,t)=>{chrome.storage.local.get("lastSynchronizationDate",(function(t){e(t.lastSynchronizationDate!=n)}))}))}()&&async function(e){const n=await function(e){const n=e.transaction(["records"],"readonly").objectStore("records");return new Promise(((e,t)=>{const o=n.getAll();o.onsuccess=function(n){e(n.target.result)},o.onerror=function(e){console.error("Error while getting all records"),t(e.target.error)}}))}(e);fetch("http://localhost:8080/api/record/many/2",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}).then((function(n){if(!n.ok)throw new Error("The backend send an error.");console.log("Stats sent"),function(e){e.transaction(["records"],"readwrite").objectStore("records").clear().onsuccess=function(e){console.log("DB cleared")}}(e),function(){const e=new Date;e.setHours(0,0,0,0);const n=e.getTime();chrome.storage.local.set({lastSynchronizationDate:n})}()})).catch((function(e){console.warn("Error while sending stats: "+e)}))}(e)}(n)})()})();
//# sourceMappingURL=background.js.map